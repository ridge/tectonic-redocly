swagger: "2.0"
info:
  version: v1alpha
  title: IAM API
  description: An API for identity and access management
basePath: /iam/v1alpha
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
tags:
# admin and Me tags are omitted as will not be documented
  - name: API Server Status
    description: An API for checking the server status
  - name: Roles
    description: The predefined roles.
  - name: Organizations
    description: Operations on organizations
  - name: Organization Policies
    description: Operations for managing organization policies
  - name: Projects
    description: Operations for managing projects
  - name: Project Policies
    description: Operations for managing project policies
  - name: Groups
    description: Operations for managing groups of members
  - name: Members
    description: Operations for managing members
  # - name: Partners
  #   description: Operations on partners
  # - name: Partner Policies
  #   description: Operations for managing partner policies
  - name: My User
    description: Operations for managing your identity and credentials
paths:
  /status:
    get:
      operationId: status
      summary: Check API server status
      description: If the API server is ready to serve requests, the response HTTP code 204 is returned.
      tags:
        - API Server Status
      responses:
        204:
          description: OK
        403:
          description: Forbidden
          schema:
            type: string
  /roles:
    get:
      operationId: listRoles
      summary: List roles
      description: List the predefined roles. A role is a set of permissions.
      tags:
        - Roles
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/roles'
  /orgs:
    # get:
    #   operationId: listOrgs
    #   summary: List the organizations.
    #   tags:
    #     - admin
    #   responses:
    #     200:
    #       description: OK
    #       schema:
    #         $ref: '#/definitions/orgs'
    #     401:
    #       description: Unauthorized
    #       schema:
    #         type: string
    #     403:
    #       description: Forbidden
    #       schema:
    #         type: string
    # post:
    #   operationId: createOrg
    #   summary: Create an organization
    #   tags:
    #     - admin
    #   parameters:
    #   - in: body
    #     name: body
    #     required: true
    #     schema:
    #       $ref: '#/definitions/org_create'
    #   responses:
    #     200:
    #       description: OK
    #       schema:
    #         $ref: '#/definitions/org'
    #     400:
    #       description: Bad request parameter
    #       schema:
    #         type: string
    #     401:
    #       description: Unauthorized
    #       schema:
    #         type: string
    #     403:
    #       description: Forbidden
    #       schema:
    #         type: string
  /orgs/{org}:
    parameters:
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: describeOrg
      summary: Describe an organization
      description: Get information about an organization.
      tags:
        - Organizations
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/org'
        401:
          description: Unauthorized
          schema:
            type: string
        400:
          description: Bad request parameter
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    # delete:
    #   operationId: deleteOrg
    #   summary: Delete an organization
    #   tags:
    #     - admin
    #   responses:
    #     204:
    #       description: OK
    #     400:
    #       description: Bad request parameter
    #       schema:
    #         type: string
    #     401:
    #       description: Unauthorized
    #       schema:
    #         type: string
    #     403:
    #       description: Forbidden
    #       schema:
    #         type: string
    #     404:
    #       description: Resource not found
    #       schema:
    #         type: string
    patch:
      operationId: updateOrg
      summary: Update an org
      tags:
        - Organizations
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/org_update'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/org'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/projects:
    parameters:
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listProjects
      summary: List projects
      description: List the projects of an organization.
      tags:
        - Projects
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/projects'
        401:
          description: Unauthorized
          schema:
            type: string
        400:
          description: Bad request parameter
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createProject
      summary: Create a project
      tags:
        - Projects
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/project_create'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/project'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/projects/{project}:
    parameters:
      - name: project
        in: path
        description: The project identifier
        required: true
        type: string
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: describeProject
      summary: Describe a project
      description: Get information about a project.
      tags:
        - Projects
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/project'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    delete:
      operationId: deleteProject
      summary: Delete a project
      tags:
        - Projects
      responses:
        204:
          description: OK
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    patch:
      operationId: updateProject
      summary: Update a project
      tags:
        - Projects
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/project_update'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/project'
          examples:
            application/json:
              id: g3ker86kt6mir8rbczwkyjotpe
              name: manhattan
              path: "/orgs/test-org/projects/manhattan"
              org_id: di86ihycue5875pb7d5ybfhn9r
              display_name: Manhattan
              created_at: '2020-07-15T14:46:47.944Z'
              updated_at: '2021-02-15T12:44:23.564Z'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/projects/{project}/policies:
    parameters:
      - name: project
        in: path
        description: The project identifier
        required: true
        type: string
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listProjectPolicies
      summary: List policies
      description: List the policies that apply to the project.
      tags:
        - Project Policies
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/policies'
          examples:
            application/json:
              items:
                - id: ygjibwfaycx47k4e3y3m8mrmzo
                  path: "/orgs/test-org/projects/sandbox/policies/@ygjibwfaycx47k4e3y3m8mrmzo"
                  org_id: di86ihycue5875pb7d5ybfhn9r
                  project_id: g3ker86kt6mir8rbczwkyjotpe
                  object_type: project
                  object_path: "/orgs/test-org/projects/sandbox"
                  member_id: icwdxdd37bxw5bojsgkp6x3p6e
                  subject_type: member
                  subject_path: "/orgs/test-org/members/bot"
                  role_path: "/roles/project-admin"
                  created_at: '2021-01-14T12:28:21.609Z'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createProjectPolicy
      summary: Create a policy
      description: Create an access policy for the project.
      tags:
        - Project Policies
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/object_policy_create'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/policy'
          examples:
            application/json:
              id: pguktgf9s9swukjn4m1sh5adqe
              path: "/orgs/test-org/projects/sandbox/policies/@pguktgf9s9swukjn4m1sh5adqe"
              org_id: di86ihycue5875pb7d5ybfhn9r
              project_id: g3ker86kt6mir8rbczwkyjotpe
              object_type: project
              object_path: "/orgs/test-org/projects/sandbox"
              member_id: t1fdw9f44d9jj99psnt3bgyh7w
              subject_type: member
              subject_path: "/orgs/test-org/members/my-bot"
              role_path: "/roles/project-operator"
              created_at: '2021-02-17T16:50:06.701Z'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/projects/{project}/policies/{policy}:
    parameters:
      - name: policy
        in: path
        description: The policy identifier
        required: true
        type: string
      - name: project
        in: path
        description: The project identifier
        required: true
        type: string
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    delete:
      operationId: deleteProjectPolicy
      summary: Delete a policy
      description: Delete a project's access policy.
      tags:
        - Project Policies
      responses:
        204:
          description: OK
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/policies:
    parameters:
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listOrgPolicies
      summary: List policies
      description: List the access policies that apply to the organization.
      tags:
        - Organization Policies
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/policies'
          examples:
            application/json:
              items:
              - id: m337qtsrm4qu1gr9qkqoucusao
                path: "/orgs/test-org/policies/@m337qtsrm4qu1gr9qkqoucusao"
                org_id: di86ihycue5875pb7d5ybfhn9r
                object_type: org
                object_path: "/orgs/test-org"
                group_id: yhyh6d6pdfoz5hndc6a4ka6bpw
                subject_type: group
                subject_path: "/orgs/test-org/groups/admins"
                role_path: "/roles/org-admin"
                created_at: '2020-12-23T13:24:26.743Z'
              - id: wcswmjx88o6md9nfdbnq6gfp5y
                path: "/orgs/test-org/policies/@wcswmjx88o6md9nfdbnq6gfp5y"
                org_id: di86ihycue5875pb7d5ybfhn9r
                object_type: org
                object_path: "/orgs/test-org"
                member_id: b8zsucjct9kth71jrgzgeqc6jr
                subject_type: member
                subject_path: "/orgs/test-org/members/@b8zsucjct9kth71jrgzgeqc6jr"
                role_path: "/roles/org-admin"
                created_at: '2020-12-28T10:32:57.644Z'
              - id: t1zd1hju38jo7ob5qna5uh9jdr
                path: "/orgs/test-org/policies/@t1zd1hju38jo7ob5qna5uh9jdr"
                org_id: di86ihycue5875pb7d5ybfhn9r
                object_type: org
                object_path: "/orgs/test-org"
                member_id: cp77fibtdomuy1ph9pucqb1ohy
                subject_type: member
                subject_path: "/orgs/test-org/members/@cp77fibtdomuy1ph9pucqb1ohy"
                role_path: "/roles/org-admin"
                created_at: '2020-07-23T06:48:00.023Z'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createOrgPolicy
      summary: Create a policy
      description: Create an access policy for the organization.
      tags:
        - Organization Policies
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/object_policy_create'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/policy'
          examples:
            application/json:
              id: m337qtsrm4qu1gr9qkqoucusao
              path: "/orgs/test-org/policies/@m337qtsrm4qu1gr9qkqoucusao"
              org_id: di86ihycue5875pb7d5ybfhn9r
              object_type: org
              object_path: "/orgs/test-org"
              group_id: yhyh6d6pdfoz5hndc6a4ka6bpw
              subject_type: group
              subject_path: "/orgs/test-org/groups/admins"
              role_path: "/roles/org-admin"
              created_at: '2020-12-23T13:24:26.743Z'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/policies/{policy}:
    parameters:
      - name: policy
        in: path
        description: The policy identifier
        required: true
        type: string
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    delete:
      operationId: deleteOrgPolicy
      summary: Delete a policy
      description: Delete an organization's access policy.
      tags:
        - Organization Policies
      responses:
        204:
          description: OK
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/groups:
    parameters:
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listOrgGroups
      summary: List groups
      description: List the member groups of an organization.
      tags:
        - Groups
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/groups'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createOrgGroup
      summary: Create a group
      description: Create a group of members.
      tags:
        - Groups
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/group_create'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/group'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/groups/{group}:
    parameters:
      - name: group
        description: The identifier of a group
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: describeOrgGroup
      summary: Describe a group
      tags:
        - Groups
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/group'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    patch:
      operationId: updateOrgGroup
      summary: Update a group
      description: Update the name or display name of a group.
      tags:
        - Groups
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/group_update'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/group'
          examples:
            application/json:
              id: yhyh6d6pdfoz5hndc6a4ka6bpw
              name: admins
              path: "/orgs/test-org/groups/admins"
              realm_type: org
              org_id: di86ihycue5875pb7d5ybfhn9r
              created_at: '2020-12-23T13:24:21.750Z'
              updated_at: '2021-02-23T17:12:09.645Z'
              display_name: Admins
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    delete:
      operationId: deleteOrgGroup
      summary: Delete a group
      tags:
        - Groups
      responses:
        204:
          description: OK
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/groups/{group}/privileges:
    parameters:
      - name: group
        description: The identifier of a group
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listOrgGroupPrivileges
      summary: List the group's privileges
      tags:
        - Groups
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/policies'
          examples:
            application/json:
              items:
              - id: m337qtsrm4qu1gr9qkqoucusao
                path: "/orgs/test-org/policies/@m337qtsrm4qu1gr9qkqoucusao"
                org_id: di86ihycue5875pb7d5ybfhn9r
                object_type: org
                object_path: "/orgs/test-org"
                group_id: yhyh6d6pdfoz5hndc6a4ka6bpw
                subject_type: group
                subject_path: "/orgs/test-org/groups/admins"
                role_path: "/roles/org-admin"
                created_at: '2020-12-23T13:24:26.743Z'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createOrgGroupPrivilege
      summary: Grant a privilege to the group
      tags:
        - Groups
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/subject_policy_create'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/policy'
          examples:
            application/json:
              id: m337qtsrm4qu1gr9qkqoucusao
              path: "/orgs/test-org/policies/@m337qtsrm4qu1gr9qkqoucusao"
              org_id: di86ihycue5875pb7d5ybfhn9r
              object_type: org
              object_path: "/orgs/test-org"
              group_id: yhyh6d6pdfoz5hndc6a4ka6bpw
              subject_type: group
              subject_path: "/orgs/test-org/groups/admins"
              role_path: "/roles/org-admin"
              created_at: '2020-12-23T13:24:26.743Z'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/groups/{group}/members:
    parameters:
      - name: group
        description: The identifier of a group
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listOrgGroupMembers
      summary: List members
      description: List the members of a group.
      tags:
        - Groups
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/group_memberships'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createOrgGroupMember
      summary: Add a member to the group
      tags:
        - Groups
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/group_membership_create'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/group_membership'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/groups/{group}/members/{member}:
    parameters:
      - name: member
        description: The identifier of a member
        in: path
        type: string
        required: true
      - name: group
        description: The identifier of a group
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: describeOrgGroupMembership
      summary: Describe a member of a group
      tags:
        - Groups
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/group_membership'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    delete:
      operationId: deleteOrgGroupMembership
      summary: Remove a member from the group
      tags:
        - Groups
      responses:
        204:
          description: OK
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/members:
    parameters:
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listOrgMembers
      summary: List members
      description: List the members of an organization.
      tags:
        - Members
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/members'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createOrgMember
      summary: Add a member
      description: Add an application or invite a user to an organization. Note that a separate call to /orgs/{org}/members/{member}/invitation/send is necessary to send the invitation email.
      tags:
        - Members
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/member_create'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/member'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/members/{member}:
    parameters:
      - name: member
        description: The identifier of a member.
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: describeOrgMember
      summary: Describe a member
      tags:
        - Members
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/member'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    patch:
      operationId: updateOrgMember
      summary: Update a member
      description: Update the properties of a member. This only applies to members of type `app`.
      tags:
        - Members
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/member_update'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/member'
          examples:
            application/json:
              created_at: '2021-02-15T12:57:39.601Z'
              display_name: New Name
              id: cymuwhd4dzi6pmtr5oyhue99jh
              name: new_bame
              org_id: di86ihycue5875pb7d5ybfhn9r
              path: "/orgs/test-org/members/new_name"
              realm_type: org
              type: app
              updated_at: '2021-02-15T13:57:49.601Z'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    delete:
      operationId: deleteOrgMember
      summary: Delete a member
      description: Remove a member from the organization.
      tags:
        - Members
      responses:
        204:
          description: OK
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/members/{member}/groups:
    parameters:
      - name: member
        description: The identifier of a member.
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listOrgMemberGroups
      summary: List member's groups
      description: List the groups the member belongs to.
      tags:
        - Members
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/group_memberships'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createOrgMemberGroup
      summary: Add member to a group
      tags:
        - Members
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/member_group_membership_create'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/group_membership'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/members/{member}/privileges:
    parameters:
      - name: member
        description: The identifier of a member
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listOrgMemberPrivileges
      summary: List member's privileges
      description: List the privileges of a member.
      tags:
        - Members
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/policies'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createOrgMemberPrivilege
      summary: Grant a privilege to a member
      tags:
        - Members
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/subject_policy_create'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/policy'
          examples:
            application/json:
              id: umf6zxhohm94xpxhpc61y78o6c
              path: "/orgs/test-org/policies/@umf6zxhohm94xpxhpc61y78o6c"
              org_id: di86ihycue5875pb7d5ybfhn9r
              object_type: org
              object_path: "/orgs/test-org"
              member_id: cymuwhd4dzi6pmtr5oyhue99jh
              subject_type: member
              subject_path: "/orgs/test-org/members/app1"
              role_path: "/roles/org-admin"
              created_at: '2021-02-21T16:15:09.263Z'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/members/{member}/api-keys:
    parameters:
      - name: member
        description: The identifier of a member
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: listOrgMemberAPIKeys
      summary: List API keys
      description: List the API keys of a member. This only applies to members of type `app`.
      tags:
        - Members
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/api_keys'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    post:
      operationId: createOrgMemberAPIKey
      summary: Create an API key
      description: Create a new API key. This only applies to members of type `app`.
      tags:
        - Members
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api_key_create'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/api_key_details'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/members/{member}/api-keys/{api_key}:
    parameters:
      - name: api_key
        description: The identifier of an API key
        in: path
        type: string
        required: true
      - name: member
        description: The identifier of a member
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: describeOrgMemberAPIKey
      summary: Describe an API key
      description: Retrieve information about a member's API key. This only applies to members of type `app` and does not return the key itself.
      tags:
        - Members
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/api_key'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    patch:
      operationId: updateOrgMemberAPIKey
      summary: Update an API key
      description: Update the name and display name of a member's API key. This only applies to members of type `app`.
      tags:
        - Members
      parameters:
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/api_key_update'
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/api_key'
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    delete:
      operationId: deleteOrgMemberAPIKey
      summary: Delete an API key
      description: Delete a member's API key. This only applies to members of type `app`.
      tags:
        - Members
      responses:
        204:
          description: Success
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/members/{member}/invitation/token:
    parameters:
      - name: member
        description: The identifier of a member
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: generateOrgMemberInvitationToken
      summary: Create an invitation token
      description: Generate an invitation token for a provisional user.
      tags:
        - Members
      responses:
        200:
          description: Success
          schema:
            type: string
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /orgs/{org}/members/{member}/invitation/send:
    parameters:
      - name: member
        description: The identifier of a member
        in: path
        type: string
        required: true
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    post:
      operationId: sendOrgMemberInvitationEmail
      summary: Send an invitation
      description: Send an invitation email to a provisional user.
      tags:
        - Members
      responses:
        204:
          description: Success
        400:
          description: Bad request parameter
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  # /orgs/{org}/transfer:
  #   parameters:
  #     - name: org
  #       in: path
  #       description: The organization identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: describeTransfer
  #     summary: Get information about the pending organization transfer, if any
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/transfer_for_org'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createTransfer
  #     summary: Create or replace an organization transfer request
  #     description: Used to request a transfer of the organization to another partner or to make it a direct customer of Ridge. In both cases the transfer is pending approval of the receiver of the request. An empty partner indicates that the organization is being transferred to Ridge.
  #     tags:
  #       - admin
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/transfer_for_org'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/transfer_for_org'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deleteTransfer
  #     # By org-admin, if they no longer want to join the partner.
  #     summary: Delete the pending organization transfer
  #     tags:
  #       - admin
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  /orgs/{org}/quota:
    parameters:
      - name: org
        in: path
        description: The organization identifier
        required: true
        type: string
    get:
      operationId: describeOrgQuota
      summary: Describe quota
      description: Describe the quota of the organization.
      tags:
        - Organizations
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/quota'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
    # patch:
    #   operationId: updateOrgQuota
    #   summary: Update quota
    #   description: Update the quota of the organization.
    #   tags:
    #     - admin
    #   parameters:
    #     - in: body
    #       name: body
    #       required: true
    #       schema:
    #         $ref: '#/definitions/quota_update'
    #   responses:
    #     200:
    #       description: Success
    #       schema:
    #         $ref: '#/definitions/quota'
    #     400:
    #       description: Bad request parameter
    #       schema:
    #         type: string
    #     401:
    #       description: Unauthorized
    #       schema:
    #         type: string
    #     403:
    #       description: Forbidden
    #       schema:
    #         type: string
    #     404:
    #       description: Resource not found
    #       schema:
    #         type: string
  # /partners:
  #   get:
  #     operationId: listPartners
  #     summary: List partners
  #     tags:
  #       - Partners
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/partners'
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  # /partners/{partner}:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: describePartner
  #     summary: Describe a partner
  #     description: Get information about a partner.
  #     tags:
  #       - Partners
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/partner'
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/clients:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: listClients
  #     summary: List clients
  #     description: List the clients of the partner
  #     tags:
  #       - Partner Clients
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/clients'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createClient
  #     summary: create client
  #     description: Create a client organization.
  #     tags:
  #       - Partner Clients
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/client_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/client'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  # /partners/{partner}/clients/{client}:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #     - name: client
  #       in: path
  #       description: The client organization identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: describeClient
  #     summary: Describe  a client
  #     description: Get information about a client.
  #     tags:
  #       - Partner Clients
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/client'
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: removeClient
  #     # Can be performed by partner admin, Ridge admin
  #     summary: Remove client
  #     description: Remove the organization from the list of clients. The client is converted to a free-standing organization.
  #     tags:
  #       - Partner Clients
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/transfers:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The identifier of the partner
  #       required: true
  #       type: string
  #   get:
  #     operationId: listTransfers
  #     summary: List transfers
  #     description: List the pending incoming transfers for the partner.
  #     tags:
  #       - Partners
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/transfers'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/transfers/{transfer}:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The identifier of the partner
  #       required: true
  #       type: string
  #     - name: transfer
  #       in: path
  #       description: The identifier of the transfer request
  #       required: true
  #       type: string
  #   get:
  #     operationId: describeTransferForPartner
  #     summary: Describe  a transfer
  #     description: Get information about a pending incoming organization transfer.
  #     tags:
  #       - Partners
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/transfer'
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/transfers/{transfer}/accept:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The identifier of the partner
  #       required: true
  #       type: string
  #     - name: transfer
  #       in: path
  #       description: The identifier of the transfer request
  #       required: true
  #       type: string
  #   post:
  #     operationId: acceptTransfer
  #     summary: Accept transfer
  #     description: Accept an incoming organization transfer.
  #     tags:
  #       - Partners
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/transfer_accept'
  #     responses:
  #       204:
  #         description: OK
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/transfers/{transfer}/reject:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The identifier of the partner
  #       required: true
  #       type: string
  #     - name: transfer
  #       in: path
  #       description: The identifier of the transfer request,
  #       required: true
  #       type: string
  #   post:
  #     operationId: rejectTransfer
  #     summary: Reject transfer
  #     description: Reject an incoming organization transfer.
  #     tags:
  #       - Partners
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/policies:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: listPartnerPolicies
  #     summary: List policies
  #     description: List the policies that apply to a partner.
  #     tags:
  #       - Partner Policies
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/policies'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createPartnerPolicy
  #     summary: Create a policy
  #     tags:
  #       - Partner Policies
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/object_policy_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/policy'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/policies/{policy}:
  #   parameters:
  #     - name: policy
  #       in: path
  #       description: The policy identifier
  #       required: true
  #       type: string
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   delete:
  #     operationId: deletePartnerPolicy
  #     summary: Delete a policy
  #     description: Delete a partner's policy.
  #     tags:
  #       - Partner Policies
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/groups:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: listPartnerGroups
  #     summary: List groups.
  #     description: List the member groups of the partner.
  #     tags:
  #       - Groups
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/groups'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createPartnerGroup
  #     summary: Create a group
  #     description: Create a member group for thr partner.
  #     tags:
  #       - Groups
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/group_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/group'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/groups/{group}:
  #   parameters:
  #     - name: group
  #       description: The identifier of a group
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: describePartnerGroup
  #     summary: Describe a group
  #     tags:
  #       - Groups
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/group'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   patch:
  #     operationId: updatePartnerGroup
  #     summary: Update  a group
  #     description: Update the name and display name of a partner's group.
  #     tags:
  #       - Groups
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/group_update'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/group'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deletePartnerGroup
  #     summary: Delete a group
  #     tags:
  #       - Groups
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/groups/{group}/privileges:
  #   parameters:
  #     - name: group
  #       description: The identifier of a group
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: listPartnerGroupPrivileges
  #     summary: List privileges
  #     description: List the group's privileges.
  #     tags:
  #       - Groups
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/policies'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createPartnerGroupPrivilege
  #     summary: Add privilege
  #     description: Add a privilege to the group.
  #     tags:
  #       - Groups
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/subject_policy_create'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/policy'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/groups/{group}/members:
  #   parameters:
  #     - name: group
  #       description: The identifier of a group
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: listPartnerGroupMembers
  #     summary: List members
  #     description: List the members of a group.
  #     tags:
  #       - Groups
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/group_memberships'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createPartnerGroupMember
  #     summary: Add member
  #     description: Add a member to the group.
  #     tags:
  #       - Groups
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/group_membership_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/group_membership'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/groups/{group}/members/{member}:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #     - name: group
  #       description: The identifier of a group
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: describePartnerGroupMembership
  #     summary: Describe a member
  #     description: Describe a member of a group.
  #     tags:
  #       - Groups
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/group_membership'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deletePartnerGroupMembership
  #     summary: Remove member
  #     description: Remove a member from the group.
  #     tags:
  #       - Groups
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/members:
  #   parameters:
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: listPartnerMembers
  #     summary: List members
  #     description: List members of the partner.
  #     tags:
  #       - Members
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/members'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createPartnerMember
  #     summary: Add member
  #     description: Add an application or invite a user to a partner. Note that a separate call to /partners/{partner}/members/{member}/invitation/send is necessary to send the invitation email.
  #     tags:
  #       - Members
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/member_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/member'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/members/{member}:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member.
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: describePartnerMember
  #     summary: Describe a member
  #     description: Describe a member of the partner.
  #     tags:
  #       - Members
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/member'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   patch:
  #     operationId: updatePartnerMember
  #     summary: Update  a member
  #     description: Update the properties of a member . This only applies to members of type `app`.
  #     tags:
  #       - Members
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/member_update'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/member'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deletePartnerMember
  #     summary: Remove member
  #     description: Remove a member from the partner.
  #     tags:
  #       - Members
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/members/{member}/groups:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member.
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: listPartnerMemberGroups
  #     summary: List groups
  #     description: List the groups the member belongs to.
  #     tags:
  #       - Members
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/group_memberships'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createPartnerMemberGroup
  #     summary: Add to group
  #     description: Add the member to a group.
  #     tags:
  #       - Members
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/member_group_membership_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/group_membership'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/members/{member}/privileges:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: listPartnerMemberPrivileges
  #     summary: List privilege
  #     description: List the privileges of a member.
  #     tags:
  #       - Members
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/policies'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createPartnerMemberPrivilege
  #     summary: Add privilege
  #     description: Add a privilege to a member.
  #     tags:
  #       - Members
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/subject_policy_create'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/policy'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/members/{member}/api-keys:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: listPartnerMemberAPIKeys
  #     summary: List API keys
  #     description: List the partner member's API keys. This only applies to members of type `app`.
  #     tags:
  #       - Members
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_keys'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createPartnerMemberAPIKey
  #     summary: Create an API key
  #     description: Create a new API key. This only applies to members of type `app`.
  #     tags:
  #       - Members
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/api_key_create'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_key_details'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/members/{member}/api-keys/{api_key}:
  #   parameters:
  #     - name: api_key
  #       description: The identifier of an API key
  #       in: path
  #       type: string
  #       required: true
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: describePartnerMemberAPIKey
  #     summary: Describe an API key
  #     description: Retrieve information about a member's API key. This only applies to members of type `app` and does not return the key itself.
  #     tags:
  #       - Members
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_key'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   patch:
  #     operationId: updatePartnerMemberAPIKey
  #     summary: Update API key
  #     description: Update the name or display name of a member's API key. This only applies to members of type `app`.
  #     tags:
  #       - Members
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/api_key_update'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_key'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deletePartnerMemberAPIKey
  #     summary: Delete an API key
  #     description: Delete a member's API key. This only applies to members of type `app`.
  #     tags:
  #       - Members
  #     responses:
  #       204:
  #         description: Success
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/members/{member}/invitation/token:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   get:
  #     operationId: generatePartnerMemberInvitationToken
  #     summary: Create an invitation token
  #     description: Generate an invitation token for a provisional user.
  #     tags:
  #       - Members
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           type: string
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /partners/{partner}/members/{member}/invitation/send:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #     - name: partner
  #       in: path
  #       description: The partner identifier
  #       required: true
  #       type: string
  #   post:
  #     operationId: sendPartnerMemberInvitationEmail
  #     summary: Send an invitation
  #     description: Send an invitation email to a provisional user.
  #     tags:
  #       - Members
  #     responses:
  #       204:
  #         description: Success
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  /me/personal:
    get:
      operationId: getOwnPersonalInfo
      summary: Retrieve the authenticated user's own personal info.
      description: 'Note: Does not apply to apps.'
      tags:
        - My User
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/personal_info'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  /me/memberships:
    get:
      operationId: getOwnMemberships
      summary: Retrieve the authenticated user's own memberships in realms.
      tags:
        - My User
      responses:
        200:
          description: Success
          schema:
            $ref: '#/definitions/members'
          examples:
            application/json:
              items:
                - created_at: '2020-11-17T18:00:50.030Z'
                  id: as8s7axfrq1q1tyfkw4t56jz1y
                  org_id: di86ihycue5875pb7d5ybfhn9r
                  path: "/orgs/test-org/members/@as8s7axfrq1q1tyfkw4t56jz1y"
                  realm_type: org
                  type: user
                  updated_at: '2020-11-17T19:19:13.896Z'
        400:
          description: Invalid request parameters
          schema:
            type: string
        401:
          description: Unauthorized
          schema:
            type: string
        403:
          description: Forbidden
          schema:
            type: string
        404:
          description: Resource not found
          schema:
            type: string
  #   post:
  #     operationId: join
  #     summary: Join a realm using an invitation token.
  #     description: 'Note: Does not apply to apps.'
  #     tags:
  #       - My User
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/join'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/member'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /me/api-keys:
  #   get:
  #     operationId: listOwnAPIKeys
  #     summary: List the authenticated user's own API keys.
  #     description: Cannot be used when authenticated with an API key.
  #     tags:
  #       - My User
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_keys'
  #         examples:
  #           application/json:
  #             items:
  #               - id: rgenrmhy1phcmeyinzxxcdcq8a
  #                 path: "/me/api-keys/eve1"
  #                 name: eve1
  #                 display_name: Eve 1
  #                 created_at: '2021-02-09T08:22:42.235Z'
  #                 updated_at: '2021-02-09T08:22:42.235Z'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createOwnAPIKey
  #     summary: Create a new API key for the authenticated user.
  #     description: Cannot be used when authenticated with an API key.
  #     tags:
  #       - My User
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/api_key_create'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_key_details'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /me/api-keys/{api_key}:
  #   parameters:
  #     - name: api_key
  #       description: The identifier of an API key
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: describeOwnAPIKey
  #     summary: Retrieve the authenticated user's own API key.
  #     description: Cannot be used when authenticated with an API key.
  #     tags:
  #       - My User
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_key'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   patch:
  #     operationId: updateOwnAPIKey
  #     summary: Update the authenticated user's own API key.
  #     description: Cannot be used when authenticated with an API key.
  #     tags:
  #       - My User
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/api_key_update'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_key'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deleteOwnAPIKey
  #     summary: Delete the authenticated user's own API key.
  #     description: Cannot be used when authenticated with an API key.
  #     tags:
  #       - My User
  #     responses:
  #       204:
  #         description: Success
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/members:
  #   get:
  #     operationId: listAdminMembers
  #     summary: List admin members.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/members'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createAdminMember
  #     summary: Invite a user to a become admin member.
  #     description: Note that a separate call to /admin/members/{member}/invitation/send is necessary to send the invitation email.
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/member_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/member'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/members/{member}:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member.
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: describeAdminMember
  #     summary: Describe an admin member.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/member'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   patch:
  #     operationId: updateAdminMember
  #     summary: Update the properties of a member. This only applies to members of type `app`.
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/member_update'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/member'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deleteAdminMember
  #     summary: Delete an admin member
  #     tags:
  #       - admin
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/members/{member}/invitation/send:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #   post:
  #     operationId: sendAdminMemberInvitationEmail
  #     summary: Send an invitation email to a provisional user.
  #     tags:
  #       - admin
  #     responses:
  #       204:
  #         description: Success
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/members/{member}/invitation/token:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: generateAdminMemberInvitationToken
  #     summary: Generate an invitation token for a provisional user.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           type: string
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/members/{member}/groups:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member.
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: listAdminMemberGroups
  #     summary: List the groups the member belongs to.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/group_memberships'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createAdminMemberGroup
  #     summary: Add the member to a group.
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/member_group_membership_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/group_membership'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/groups:
  #   get:
  #     operationId: listAdminGroups
  #     summary: List the groups.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/groups'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createAdminGroup
  #     summary: Create a group.
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/group_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/group'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/groups/{group}:
  #   parameters:
  #     - name: group
  #       description: The identifier of a group
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: describeAdminGroup
  #     summary: Describe a group.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/group'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   patch:
  #     operationId: updateAdminGroup
  #     summary: Update group parameters
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/group_update'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/group'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deleteAdminGroup
  #     summary: Delete a group
  #     tags:
  #       - admin
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/groups/{group}/privileges:
  #   parameters:
  #     - name: group
  #       description: The identifier of a group
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: listAdminGroupPrivileges
  #     summary: List the policies granting roles to the group.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/policies'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createAdminGroupPrivilege
  #     summary: Grant a role to the group.
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/subject_policy_create'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/policy'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/groups/{group}/members:
  #   parameters:
  #     - name: group
  #       description: The identifier of a group
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: listAdminGroupMembers
  #     summary: List the members of a group.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/group_memberships'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createAdminGroupMember
  #     summary: Add a member to the group.
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/group_membership_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/group_membership'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/groups/{group}/members/{member}:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #     - name: group
  #       description: The identifier of a group
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: describeAdminGroupMembership
  #     summary: Describe a member of a group.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/group_membership'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deleteAdminGroupMembership
  #     summary: Remove a member from the group.
  #     tags:
  #       - admin
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/members/{member}/privileges:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: listAdminMemberPrivileges
  #     summary: List the privileges of a member.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/policies'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createAdminMemberPrivilege
  #     summary: Grant a role to the member.
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/subject_policy_create'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/policy'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/policies:
  #   get:
  #     operationId: listAdminPolicies
  #     summary: List the policies that apply to the admin realm.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/policies'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createAdminPolicy
  #     summary: Create a policy for the admin realm.
  #     tags:
  #       - admin
  #     parameters:
  #     - in: body
  #       name: body
  #       required: true
  #       schema:
  #         $ref: '#/definitions/object_policy_create'
  #     responses:
  #       200:
  #         description: OK
  #         schema:
  #           $ref: '#/definitions/policy'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/policies/{policy}:
  #   parameters:
  #     - name: policy
  #       in: path
  #       description: The policy identifier
  #       required: true
  #       type: string
  #   delete:
  #     operationId: deleteAdminPolicy
  #     summary: Delete a partner's policy.
  #     tags:
  #       - admin
  #     responses:
  #       204:
  #         description: OK
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/members/{member}/api-keys:
  #   parameters:
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: listAdminMemberAPIKeys
  #     summary: List the API keys of a member. This only applies to members of type `app`.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_keys'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   post:
  #     operationId: createAdminMemberAPIKey
  #     summary: Create a new API key. This only applies to members of type `app`.
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/api_key_create'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_key_details'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  # /admin/members/{member}/api-keys/{api_key}:
  #   parameters:
  #     - name: api_key
  #       description: The identifier of an API key
  #       in: path
  #       type: string
  #       required: true
  #     - name: member
  #       description: The identifier of a member
  #       in: path
  #       type: string
  #       required: true
  #   get:
  #     operationId: describeAdminMemberAPIKey
  #     summary: Retrieve information about a member's API key. This only applies to members of type `app`and does not retrieve the key itself.
  #     tags:
  #       - admin
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_key'
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   patch:
  #     operationId: updateAdminMemberAPIKey
  #     summary: Update the name and display name of a member's API key. This only applies to members of type `app`.
  #     tags:
  #       - admin
  #     parameters:
  #       - in: body
  #         name: body
  #         required: true
  #         schema:
  #           $ref: '#/definitions/api_key_update'
  #     responses:
  #       200:
  #         description: Success
  #         schema:
  #           $ref: '#/definitions/api_key'
  #       400:
  #         description: Bad request parameter
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
  #   delete:
  #     operationId: deleteAdminMemberAPIKey
  #     summary: Delete a member's API key. This only applies to members of type `app`.
  #     tags:
  #       - admin
  #     responses:
  #       204:
  #         description: Success
  #       400:
  #         description: Invalid request parameters
  #         schema:
  #           type: string
  #       401:
  #         description: Unauthorized
  #         schema:
  #           type: string
  #       403:
  #         description: Forbidden
  #         schema:
  #           type: string
  #       404:
  #         description: Resource not found
  #         schema:
  #           type: string
definitions:
  group:
    description: A group of users or apps that are associated with the org
    type: object
    required:
      - id
      - name
      - path
      - realm_type
      - created_at
    properties:
      id:
        description: A system-defined unique ID of the group.
        type: string
      name:
        description: The human readable name of the group. The name is unique within the organization.
        type: string
        minLength: 1
        maxLength: 63
        pattern: '^[a-z]([-a-z0-9]*[a-z0-9])?$'
        example: admins
      path:
        description: The path to the resource that includes all the parents
        type: string
        example: /orgs/acme/groups/admins
      realm_type:
        description: The type of realm containing the group
        type: string
        enum: [partner, org, admin]
      org_id:
        description: The unique identifier of the organization, if the group is within one.
        type: string
      partner_id:
        description: The unique identifier of the partner, if the group is within one.
        type: string
      created_at:
        description: The time at which this group was created
        type: string
        format: date-time
      updated_at:
        description: The time at which this group was last updated
        type: string
        format: date-time
      display_name:
        description: The display name of the group.
        type: string
        maxLength: 512
    example:
      id: yhyh6d6pdfoz5hndc6a4ka6bpw
      name: admins
      path: "/orgs/test-org/groups/admins"
      realm_type: org
      org_id: di86ihycue5875pb7d5ybfhn9r
      created_at: '2020-12-23T13:24:21.750Z'
      updated_at: '2020-12-23T13:24:21.750Z'
      display_name: admins
  groups:
    description: A list of groups.
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/group'
  group_create:
    type: object
    required:
      - name
    properties:
      name:
        description: The human readable name of the group. The name is unique within the organization.
        type: string
        minLength: 1
        maxLength: 63
        pattern: '^[a-z]([-a-z0-9]*[a-z0-9])?$'
        example: admins
      display_name:
        description: The display name of the group.
        type: string
        maxLength: 512
        example: admins
  group_update:
    type: object
    properties:
      display_name:
        description: The display name of the group.
        type: string
        maxLength: 512
      name:
        description: The human readable name of the group. The name is unique within the organization.
        type: string
        minLength: 1
        maxLength: 63
        pattern: '^[a-z]([-a-z0-9]*[a-z0-9])?$'
        example: admins
    example:
      display_name: Admins
  role:
    description: A role that is defined and managed by the system.
    type: object
    required:
      - name
      - path
      - realm_type
      - object_type
    properties:
      name:
        description: The human readable name of the role.
        type: string
        minLength: 1
        maxLength: 63
        pattern: '^[a-z]([-a-z0-9]*[a-z0-9])?$'
        example: project-admin
      path:
        description: The path to the resource that includes all the parents
        type: string
        example: /roles/project-admin
      realm_type:
        description: The type of realm to which the role applies.
        type: string
        enum: [partner, org, admin]
      object_type:
        description: The type of the object to which the role applies.
        type: string
        enum: [partner, org, project]
      display_name:
        description: The display name of the role.
        type: string
        maxLength: 512
  roles:
    description: A list of roles.
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/role'
    example:
      items:
        - name: org-accountant
          path: "/roles/org-accountant"
          realm_type: org
          object_type: org
          display_name: Organization accountant
        - name: org-admin
          path: "/roles/org-admin"
          realm_type: org
          object_type: org
          display_name: Organization administrator
        - name: org-operator
          path: "/roles/org-operator"
          realm_type: org
          object_type: org
          display_name: Organization operator
        - name: project-admin
          path: "/roles/project-admin"
          realm_type: org
          object_type: project
          display_name: Project administrator
        - name: project-operator
          path: "/roles/project-operator"
          realm_type: org
          object_type: project
          display_name: Project operator
  policy:
    type: object
    required:
      - id
      - path
      - subject_type
      - subject_path
      - object_type
      - role_path
      - created_at
    properties:
      id:
        description: A unique ID of the policy.
        type: string
      path:
        description: The path to the resource that includes all the parents
        type: string
        example: /orgs/test-org/projects/manhattan/policies/@42
      org_id:
        description: The unique identifier of the organization, if the policy is within one.
        type: string
      partner_id:
        description: The unique identifier of the partner, if the policy is within one.
        type: string
      project_id:
        description: The unique identifier of the project, if the object of the policy is a project.
        type: string
      object_type:
        description: Type of the policy object.
        type: string
        enum: [partner, org, project]
      object_path:
        description: The path to the policy object.
        type: string
        example: /orgs/test-org/projects/manhattan
      member_id:
        description: The unique identifier of the member, if the subject of the policy is a member.
        type: string
      group_id:
        description: The unique identifier of the group, if the subject of the policy is a group.
        type: string
      subject_type:
        description: Type of the policy subject.
        type: string
        enum: [member, group]
      subject_path:
        description: The path to the policy subject.
        type: string
        example: /orgs/test-org/members/@42
      role_path:
        description: The path to the role.
        type: string
        example: /roles/org-admin
      created_at:
        description: The time at which this policy was created
        type: string
        format: date-time
  policies:
    description: A list of policies.
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/policy'
  object_policy_create:
    type: object
    required:
      - role_path
    properties:
      member_id:
        description: The unique identifier of the member, if the subject is a member. If specified together with subject_path, they must agree.
        type: string
      group_id:
        description: The unique identifier of the group, if the subject is a group. If specified together with subject_path, they must agree.
        type: string
      org_id:
        description: The unique identifier of the organization.
        type: string
      subject_path:
        description: The path to the policy subject (member or group). If omitted, one of (member_id, group_id) must be specified.
        type: string
        example: /orgs/test-org/members/@42
      role_path:
        description: The path to the role.
        type: string
        example: /roles/org-admin
  subject_policy_create:
    type: object
    required:
      - role_path
    properties:
      project_id:
        description: The unique identifier of the project, if the object is a project. If specified together with object_path, they must agree.
        type: string
      object_path:
        description: The path to the policy object (partner, organization or project). If the object is an organization, object_path must be the path to the subject's organization or omitted. If the object is a project, then object_path, project_id or both must be specified.
        type: string
        example: /orgs/test-org
      role_path:
        description: The path to the role.
        type: string
        example: /roles/org-admin
    example:
      object_path: /orgs/test-org
      role: /roles/org-admin
  partner:
    type: object
    required:
      - name
      - id
      - path
    properties:
      id:
        description: A unique ID of the partner.
        type: string
      name:
        description: The human readable name of the partner.
        type: string
        minLength: 1
        maxLength: 63
        pattern: '^[a-z]([-a-z0-9]*[a-z0-9])?$'
        example: test-org
      path:
        description: The path to the resource that includes all the parents
        type: string
        example: /partners/acme
      display_name:
        description: The display name of the partner
        type: string
        maxLength: 512
  partners:
    description: A list of partners.
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/partner'
  org:
    type: object
    required:
      - name
      - id
      - path
      - created_at
    properties:
      id:
        description: A unique ID of the organization.
        type: string
      name:
        description: The human readable name of the organization.
        type: string
        maxLength: 63
        example: acme
      path:
        description: The path to the resource that includes all the parents
        type: string
        example: /orgs/acme
      display_name:
        description: The display name of the organization.
        type: string
        maxLength: 512
      created_at:
        description: The time at which this role was created
        type: string
        format: date-time
      updated_at:
        description: The time at which this organization was last updated
        type: string
        format: date-time
      deleted:
        description: True if the organization is deleted.
        type: boolean
      partner_id:
        description: The ID of the partner for this organization, if any
        type: string
      partner_path:
        description: The path to the partner for this organization, if any.
        type: string
        example: /partners/acme
    example:
      id: di86ihycue5875pb7d56bfhn9r
      name: test-org
      path: "/orgs/test-org"
      display_name: Test Org
      created_at: '2020-06-26T17:03:35.059Z'
      updated_at: '2020-06-26T17:03:35.059Z'
  orgs:
    description: A list of organizations.
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/org'
  org_create:
    type: object
    required:
      - name
    properties:
      name:
        description: The human readable name of the organization.
        type: string
        maxLength: 63
        example: acme
      display_name:
        description: The display name of the organization.
        type: string
        maxLength: 512
  org_update:
    type: object
    properties:
      name:
        description: The human readable name of the organization.
        type: string
        maxLength: 63
        example: acme
      display_name:
        description: The display name of the organization.
        type: string
        maxLength: 512
    example:
      name: test-org
      display_name: Test Org
  clients:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/client'
  client:
    # FIXME (misha): Parameters of client: whitelist, pricing
    type: object
    required:
      - id
      - path
      - org_path
      - partner_id
      - partner_path
    properties:
      id:
        description: The ID of the client, identical to the organization ID.
        type: string
      path:
        description: The path of the client.
        type: string
      partner_id:
        description: The ID of the client partner.
        type: string
      partner_path:
        description: The path of the client partner.
        type: string
      org_path:
        description: The path of the client organization.
        type: string
  client_create:
    # FIXME (misha): Parameters of client: whitelist, pricing
    type: object
    required:
      - name
    properties:
      name:
        description: The human readable name of the organization.
        type: string
        maxLength: 63
        example: acme
      display_name:
        description: The display name of the organization.
        type: string
        maxLength: 512
  transfers:
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/transfer'
  transfer:
    type: object
    required:
      - id
      - path
      - org_id
      - org_path
    properties:
      id:
        description: The unique identifier of the transfer request.
        type: string
      path:
        description: The path to the transfer object that includes all its parents
        type: string
        example: /orgs/acme/transfers/@abcdefghij
      org_id:
        description: The ID of the organization that is requesting a new partner.
        type: string
      org_path:
        description: The path of the organization that is requesting a new partner.
        type: string
  transfer_accept:
    # FIXME (misha): parameters for acceptance (whitelist, pricing)
    type: object
    properties:
      pricing:
        type: string
        description: "Not implemented yet, for later use"
      whitelist:
        type: string
        description: "Not implemented yet, for later use"
  transfer_for_org:
    type: object
    properties:
      partner_id:
        description: The ID of the pending new partner for this organization.
        type: string
      partner_path:
        description: The path to the pending new partner for this organization.
        type: string
  project:
    type: object
    required:
      - name
      - id
      - path
      - org_id
      - created_at
    properties:
      id:
        description: A unique ID of the project.
        type: string
      name:
        description: The human readable name of the project.
        type: string
        maxLength: 63
        example: manhattan
      path:
        description: The path to the resource that includes all the parents
        type: string
        example: /orgs/acme/projects/manhattan
      org_id:
        description: The unique identifier of the organization.
        type: string
      display_name:
        description: The display name of the project.
        type: string
        maxLength: 512
      created_at:
        description: The time at which this role was created
        type: string
        format: date-time
      updated_at:
        description: The time at which this project was last updated
        type: string
        format: date-time
      deleted:
        description: True if the project is deleted.
        type: boolean
    example:
      id: g3ker86kt6mir8rbczwkyjotpe
      name: sandbox
      path: "/orgs/test-org/projects/sandbox"
      org_id: di86ihycue5875pb7d5ybfhn9r
      display_name: Sandbox
      created_at: '2020-07-15T14:46:47.944Z'
      updated_at: '2020-07-15T14:46:47.944Z'
  projects:
    description: A list of projects.
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/project'
  project_create:
    type: object
    required:
      - name
    properties:
      name:
        description: The human readable name of the project.
        type: string
        maxLength: 63
        example: sandbox
      display_name:
        description: The display name of the project.
        type: string
        maxLength: 512
        example: Sandbox
  project_update:
    type: object
    properties:
      name:
        description: The human readable name of the project.
        type: string
        maxLength: 63
        example: manhattan
      display_name:
        description: The display name of the project.
        type: string
        maxLength: 512
        example: Manhattan
  member:
    allOf:
    - type: object
      required:
        - id
        - path
        - realm_type
        - type
        - created_at
      properties:
        id:
          description: The unique ID of the member
          type: string
        path:
          description: The path to the resource that includes all the parents
          type: string
          example: /orgs/acme/members/@42
        org_id:
          description: The unique ID of the organization, if the member is within one.
          type: string
        partner_id:
          description: The unique identifier of the partner, if the member is within one.
          type: string
        realm_type:
          description: The type of realm containing the member
          type: string
          enum: [partner, org, admin]
        type:
          description: The type of the member.
          type: string
          enum: [user, invitee, app]
        name:
          description: The name of the member (apps only).
          type: string
          maxLength: 63
        display_name:
          description: The display name of the member (apps only).
          type: string
          maxLength: 512
        created_at:
          description: The time at which the member was created
          type: string
          format: date-time
        updated_at:
          description: The time at which the member was last updated
          type: string
          format: date-time
    - $ref: '#/definitions/personal_info'
    example:
      created_at: '2021-02-15T12:57:39.601Z'
      display_name: APP 1
      id: cymuwhd4dzi6pmtr5oyhue99jh
      name: app1
      org_id: di86ihycue5875pb7d5ybfhn9r
      path: "/orgs/test-org/members/app1"
      realm_type: org
      type: app
      updated_at: '2021-02-15T12:57:39.601Z'
  member_update:
    type: object
    properties:
      name:
        description: The name of the member (apps only).
        type: string
        maxLength: 63
        example: new_name
      display_name:
        description: The display name of the member (apps only).
        type: string
        maxLength: 512
        example: New NAme
  members:
    description: A list of members.
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/member'
    example:
      items:
        - created_at: '2020-11-17T18:00:50.030Z'
          id: as8s7axfrq1q1tyfkw4t56jz1y
          org_id: di86ihycue5875pb7d5ybfhn9r
          path: "/orgs/test-org/members/@as8s7axfrq1q1tyfkw4t56jz1y"
          realm_type: org
          type: user
          updated_at: '2020-11-17T19:19:13.896Z'
          email: eve.smith@foo.com
          full_name: Eve Smith
          avatar: https://lh3.googleusercontent.com/a-/AOh22Ggvu8zDMuwMBr9p-VleQAEQV703_o5au6hp5COR=s96-c
        - created_at: '2021-02-15T12:57:39.601Z'
          display_name: APP 1
          id: cymuwhd4dzi6pmtr5oyhue99jh
          name: app1
          org_id: di86ihycue5875pb7d5ybfhn9r
          path: "/orgs/test-org/members/app1"
          realm_type: org
          type: app
          updated_at: '2021-02-15T12:57:39.601Z'
  member_create:
    type: object
    required:
      - type
    properties:
      type:
        description: "Type of the member to add: invitee means invite a user, app means create an app."
        type: string
        enum: [invitee, app]
      name:
        description: The name of the app, if creating an app. Must be unique within the organization.
        type: string
        maxLength: 63
      display_name:
        description: The display name of the app, if creating an app.
        type: string
        maxLength: 512
      email:
        description: The email address of the user, if inviting a user.
        type: string
        format: email
        example: user@example.com
      full_name:
        description: The full name of the user, if inviting a user.
        type: string
        example: J. Random User
    example:
      type: app
      name: app1
      display_name: APP 1
  join:
    type: object
    required:
      - token
    properties:
      token:
        description: An invitation token.
        type: string
  group_memberships:
    description: A list of group memberships.
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/group_membership'
  group_membership:
    description: A group membership.
    type: object
    required:
      - id
      - path
      - group_id
      - group_path
      - member_id
      - member_path
      - created_at
    properties:
      id:
        description: The unique ID of the group membership.
        type: string
      path:
        description: The path to the group membership.
        type: string
        example: /orgs/acme/groups/admins/members/@42
      group_id:
        description: The unique ID of the group.
        type: string
      group_path:
        description: The path to the group.
        type: string
        example: /orgs/acme/groups/admins
      member_id:
        description: The unique ID of the member.
        type: string
      member_path:
        description: The path to the member.
        type: string
        example: /orgs/acme/members/@42
      created_at:
        description: The time at which the member was added to the group
        type: string
        format: date-time
    example:
      id: t1mf43ywwf6jqb49c14k5eobxy
      path: "/orgs/test-org/groups/admins/members/@t1mf43ywwf6jqb49c14k5eobxy"
      group_id: yhyh6d6pdfoz5hndc6a4ka6bpw
      group_path: "/orgs/test-org/groups/admins"
      member_id: as8s7axfrq1q1tyfkw4t56jz1y
      member_path: "/orgs/test-org/members/@as8s7axfrq1q1tyfkw4t56jz1y"
      created_at: '2021-01-05T17:05:51.329Z'
  group_membership_create:
    type: object
    properties:
      member_id:
        description: The unique ID of the member. Either member_id or member_path must be specified; if both are present, they must agree.
        type: string
      member_path:
        description: The path to the member. Either member_id or member_path must be specified; if both are present, they must agree.
        type: string
        example: /orgs/acme/members/@42
    example:
      member_id: as8s7axfrq1q1tyfkw4t56jz1y
  member_group_membership_create:
    type: object
    properties:
      group_id:
        description: The unique ID of the group. Either group_id or group_path must be specified; if both are present, they must agree.
        type: string
      group_path:
        description: The path to the group. Either group_id or group_path must be specified; if both are present, they must agree.
        type: string
        example: /orgs/acme/groups/admins
    example:
      group_path: /orgs/test-org/groups/admins
  personal_info:
    type: object
    properties:
      email:
        description: The email address of the user.
        type: string
        format: email
        example: user@example.com
      full_name:
        description: The full name of the user.
        type: string
        example: J. Random User
      avatar:
        description: URL to the avatar image.
        type: string
        format: uri
    example:
      email: eve.smith@foo.com
      full_name: Eve Smith
      avatar: https://lh3.googleusercontent.com/a-/AOh22Ggvu8zDMuwMBr9p-VleQAEQV703_o5au6hp5COR=s96-c
  api_keys:
    description: A list of API keys.
    type: object
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/api_key'
  api_key:
    description: Properties of an API key.
    type: object
    required:
      - id
      - path
      - name
      - created_at
    properties:
      id:
        description: The unique ID of the API key.
        type: string
      path:
        description: The path to the API key.
        type: string
        example: /orgs/acme/members/robot/api-keys/automation
      member_id:
        description: The unique ID of the owning member, if it's an app.
        type: string
      name:
        description: The name of the API key. Must be unique among the keys of the same user or app.
        type: string
        maxLength: 63
      display_name:
        description: The display name of the API key.
        type: string
        maxLength: 512
      created_at:
        description: The time at which this API key was created.
        type: string
        format: date-time
      updated_at:
        description: The time at which this API key was last updated.
        type: string
        format: date-time
    example:
      id: ch4prd1ckfwjdiaz9f8ttowdww
      path: "/orgs/test-org/members/app1/api-keys/key1"
      member_id: cymuwhd4dzi6pmtr5oyhue99jh
      name: key1
      display_name: Key 1
      created_at: '2021-02-21T16:24:42.436Z'
      updated_at: '2021-02-21T16:24:42.436Z'
  api_key_details:
    description: Properties of an API key, including the auth token.
    allOf:
    - $ref: '#/definitions/api_key'
    - type: object
      required:
        - token
      properties:
        token:
          description: The secret token for API authentication
          type: string
    example:
      id: ch4prd1ckfwjdiaz9f8ttowdww
      path: "/orgs/test-org/members/app1/api-keys/key1"
      member_id: cymuwhd4dzi6pmtr5oyhue99jh
      name: key1
      display_name: Key 1
      created_at: '2021-02-21T16:24:42.436Z'
      updated_at: '2021-02-21T16:24:42.436Z'
      token: 283a41e1d9f5c954e439c9c4e74b17338cd8711f684cdcf295160da2b9468af16f9acd334477d8cc13e6cb939d38d0c6d87b2f2b4b16ad559727db5ff5ad16d0a774783e56200f8a0ad3b4e7bdd7a28cad68b8189af53566a31ee8b78766bbebcf11bbc2f229f8cacd0f1dc720392e00cdab18061e02527c00a2c87ad7760a873e0d60f46e231fa4c0796f568b5928597a787c4d391ed8ac029d2326db85f1461d0d7fe1978187c84d2d3b68585732dacb5e45c76418a90a01e1398019453c672a39204831c51a0ab59eeea8fbdca4e1d2f328e34234003e79228ed019a773f53c3a2c698cfbfec39e7cc90c0443fb0c23489546190e54b2edace3c121495f29
  api_key_create:
    required:
      - name
    properties:
      name:
        description: The name of the API key. Must be unique among the keys of the same user or app.
        type: string
        maxLength: 63
        example: api_key
      display_name:
        description: The display name of the API key.
        type: string
        maxLength: 512
        example: API Key
    example:
      name: key1
      display_name: Key 1
  api_key_update:
    properties:
      name:
        description: The name of the API key. Must be unique among the keys of the same user or app.
        type: string
        maxLength: 63
        example: key1
      display_name:
        description: The display name of the API key.
        type: string
        maxLength: 512
        example: Key 1
  quota:
    required:
      - limits
      - usage
    properties:
      limits:
        description: Maximum resource usage. Omitted parameters are unlimited.
        $ref: '#/definitions/quantity_set'
      usage:
        description: Actual resource usage
        $ref: '#/definitions/quantity_set'
    example:
      limits:
        cpu_cores: 1000
        instance_storage: 1073741824000
        networks: 1000
        public_ips: 1000
        ram: 1073741824000
        vms: 1000
      usage:
        cpu_cores: 10
        instance_storage: 182536110080
        forwarders: 2
        gateways: 2
        networks: 2
        persistent_storage: 6442450944
        ram: 13958643712
        vms: 5
  quota_update:
    type: object
    properties:
      limits:
        description: Maximum resource usage. Omitted parameters are unlimited. Providing a value for limits replaces all values, even those that are unspecified. Setting the entire set to "null" means using the default limits.
        x-nullable: true
        $ref: '#/definitions/quota_limits'
  quota_limits:
    x-go-type:
      type: QuotaLimits
      import:
        package: go.tectonic.network/iam/api/custom
    $ref: '#/definitions/quantity_set'
  quantity_set:
    description: A set of quantities. The object maps quantity identifiers to values. See https://api.ridge.co/compute/v1alpha/quantities for possible properties.
    type: object
    additionalProperties:
      type: integer
